openapi: 3.0.3
info:
  title: MULTI LEVEL COMMENT SYSTEM
  version: 1.0.0
  description: API documentation with OpenAPI and Express

servers:
  - url: https://multi-level-comment-system-o0fz.onrender.com
    description: Local server

paths:
  /user/register:
    post:
      summary: Register a new user using YAML
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        201:
          $ref: '#/components/responses/RegisterSuccess'
        400:
          $ref: '#/components/responses/ValidationError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        409:
          $ref: '#/components/responses/ConflictError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /user/login:
    post:
      summary: Log in an existing user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          $ref: '#/components/responses/LoginSuccess'
        400:
          $ref: '#/components/responses/ValidationError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/posts:
    post:
      summary: Create a post
      tags:
        - Auth
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        201:
          $ref: '#/components/responses/PostSuccess'
        400:
          $ref: '#/components/responses/ValidationError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/posts/{postId}/comments:
    post:
      summary: Create a post comment
      tags:
        - Auth
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            example: 1
          description: The id of the post to comment on
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCommentRequest'
      responses:
        201:
          $ref: '#/components/responses/PostCommentSuccess'
        400:
          $ref: '#/components/responses/ValidationError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Get comments of a post
      tags:
        - Auth
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            example: "1"
          description: The id of the post to get comments for
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [ createdAt, repliesCount ]
            default: createdAt
          description: The field to sort comments by
        - name: sortOrder
          in: query
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
          description: The sorting order (ascending or descending)
      security:
        - BearerAuth: [ ]
      responses:
        200:
          $ref: '#/components/responses/GetCommentsSuccess'
        400:
          $ref: '#/components/responses/ValidationError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/posts/{postId}/comments/{commentId}/reply:
    post:
      summary: Create a reply to comment
      tags:
        - Auth
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            example: 1
          description: The id of the post to comment on
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            example: 2
            description: The id of the comment to reply on
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostReplyCommentRequest'
      responses:
        201:
          $ref: '#/components/responses/PostReplyCommentSuccess'
        400:
          $ref: '#/components/responses/ValidationError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/posts/{postId}/comments/{commentId}/expand:
    get:
      summary: Get expanded top-level comments
      tags:
        - Auth
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            example: "1"
          description: The ID of the post to get comments from
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            example: "2"
          description: The ID of the comment to expand
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
          description: The page number for pagination (default is 1)
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            default: 3
            minimum: 1
            maximum: 100
          description: The number of replies per page (default is 3)
      security:
        - BearerAuth: [ ]
      responses:
        200:
          $ref: '#/components/responses/GetTopLevelComments'
        400:
          $ref: '#/components/responses/ValidationError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'



components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: jwt

  schemas:

    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        password:
          type: string
          format: password
          example: StrongP@ssw0rd

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          description: Username of the user (optional if email is provided)
          example: johndoe
        email:
          type: string
          format: email
          description: Email of the user (optional if username is provided)
          example: johndoe@example.com
        password:
          type: string
          format: password
          description: User's password
          example: StrongP@ssw0rd
      required:
        - password
      anyOf:
        - required: [ username ]
        - required: [ email ]

    AuthSuccessResponse:
      type: object
      properties:
        status:
          type: number
          example: 201
        result:
          type: string
          example: success
        code:
          type: string
          example: USER_REGISTERED
        message:
          type: string
          example: User registered successfully
        data:
          type: object
          properties:
            userId:
              type: string
              example: "12345"
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        requestId:
          type: string
          example: abcde-12345
        timestamp:
          type: string
          format: date-time

    ApiError:
      type: object
      required:
        - type
        - title
        - status
        - detail
        - instance
        - code
        - requestId
        - timestamp
      properties:
        type:
          type: string
          example: urn:error:VALIDATION_ERROR
        title:
          type: string
          example: Bad Request
        status:
          type: integer
          example: 400
        detail:
          type: string
          example: One or more validation errors occurred.
        instance:
          type: string
          example: /register
        code:
          type: string
          example: VALIDATION_ERROR
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
        requestId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        timestamp:
          type: string
          format: date-time

    PostRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          description: Title of the post
          example: Jungle Book
        content:
          type: string
          description: Content of the post
          example: Story of animals & wonder boy mogli

    PostCommentRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: Comment to the post
          example: this is my comment to the post.

    PostReplyCommentRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: reply to the comment
          example: this is my reply to the comment.

    getCommentsRequest:
      type: object
      properties:
        sortBy:
          type: string
          enum: [ createdAt, commentId ]
          description: "The field to sort comments by"
        sortOrder:
          type: string
          enum: [ asc, desc ]
          description: "The sorting order (ascending or descending)"
      required: [ ]

    Comment:
      type: object
      properties:
        id:
          type: string
          example: "64f0cabc1234abcd5678ef90"
        postId:
          type: string
          example: "1"
        parentCommentId:
          type: string
          nullable: true
          example: "2"
        authorId:
          type: string
          example: "user_123"
        content:
          type: string
          example: "This is a reply to the original comment."
        createdAt:
          type: string
          format: date-time
          example: "2025-06-09T10:15:30Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-06-09T11:00:00Z"
        repliesCount:
          type: integer
          example: 3
        isEdited:
          type: boolean
          example: false

  responses:
    RegisterSuccess:
      description: Successful registration
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthSuccessResponse'
          example:
            status: 201
            result: success
            code: USER_REGISTERED
            message: User registered successfully
            data:
              token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              userId: "12345"
            requestId: abcde-12345
            timestamp: 2025-06-03T12:00:00Z

    LoginSuccess:
      description: Successful login
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthSuccessResponse'
          example:
            status: 200
            result: success
            code: USER_LOGGED_IN
            message: User logged in successfully
            data:
              token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              userId: "12345"
            requestId: abcde-67890
            timestamp: 2025-06-03T12:10:00Z

    PostSuccess:
      description: Post created successfull
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthSuccessResponse'
          example:
            status: 201
            result: success
            code: Post created successfully
            message:
            data:
              title: Jungle Book
              content: Story of animals & wonder boy mogli
              userId: "12345"
            requestId: abcde-67890
            timestamp: 2025-06-03T12:10:00Z

    PostCommentSuccess:
      description: Post comment created successfull
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthSuccessResponse'
          example:
            status: 201
            result: success
            code: Post comment created successfully
            message:
            data:
              text: Story of animals & wonder boy mogli
              createdAt: 03-03-2023
              postId: "12345"
              parentCommentId: null
              replies: [ ]
              totalReplies: 0
            requestId: abcde-67890
            timestamp: 2025-06-03T12:10:00Z

    PostReplyCommentSuccess:
      description: Reply comment created successfull
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthSuccessResponse'
          example:
            status: 201
            result: success
            code: Reply comment created successfully
            message:
            data:
              text: Story of animals & wonder boy mogli
              createdAt: 03-03-2023
              postId: "12345"
              parentCommentId: "2"
              replies: [ ]
              totalReplies: 0
            requestId: abcde-67890
            timestamp: 2025-06-03T12:10:00Z

    GetCommentsSuccess:
      description: Successfully retrieved comments
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 200
              result:
                type: string
                example: success
              code:
                type: string
                example: COMMENTS_RETRIEVED
              message:
                type: string
                example: Comments fetched successfully
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    text:
                      type: string
                      example: "This is a parent comment"
                    createdAt:
                      type: string
                      format: date-time
                      example: "2025-06-07T10:00:00Z"
                    postId:
                      type: integer
                      example: 12345
                    parentCommentId:
                      type: integer
                      nullable: true
                      example: null
                    replies:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 11
                          text:
                            type: string
                            example: "This is a reply"
                          createdAt:
                            type: string
                            format: date-time
                            example: "2025-06-07T11:00:00Z"
                    totalReplies:
                      type: integer
                      example: 2
              requestId:
                type: string
                example: abcde-12345
              timestamp:
                type: string
                format: date-time
                example: "2025-06-07T12:10:00Z"

    GetTopLevelComments:
      description: Comments expanded successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 200
              result:
                type: string
                example: success
              code:
                type: string
                example: COMMENTS_EXPANDED
              message:
                type: string
                example: Comments expanded successfully.
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
              meta:
                type: object
                properties:
                  page:
                    type: integer
                    example: 1
                  pageSize:
                    type: integer
                    example: 10
                  totalReplies:
                    type: integer
                    example: 42
                  totalPages:
                    type: integer
                    example: 5
                  hasNextPage:
                    type: boolean
                    example: true
                  hasPreviousPage:
                    type: boolean
                    example: false
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: https://api.example.com/api/posts/1/comments/2/expand?page=1&pageSize=10
                      first:
                        type: string
                        example: https://api.example.com/api/posts/1/comments/2/expand?page=1&pageSize=10
                      last:
                        type: string
                        example: https://api.example.com/api/posts/1/comments/2/expand?page=5&pageSize=10
                      previous:
                        type: string
                        example: https://api.example.com/api/posts/1/comments/2/expand?page=1&pageSize=10
                      next:
                        type: string
                        example: https://api.example.com/api/posts/1/comments/2/expand?page=2&pageSize=10
              requestId:
                type: string
                example: abc123req-id
              timestamp:
                type: string
                format: date-time
                example: "2025-06-09T12:34:56Z"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            type: urn:error:VALIDATION_ERROR
            title: Bad Request
            status: 400
            detail: One or more validation errors occurred.
            instance: /user/register
            code: VALIDATION_ERROR
            errors:
              - field: email
                message: Invalid email format
            requestId: abc-400
            timestamp: 2025-06-03T12:00:00Z

    ForbiddenError:
      description: Forbidden – you don’t have permission
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            type: urn:error:FORBIDDEN
            title: Forbidden
            status: 403
            detail: You are not authorized to access this resource.
            instance: /admin/dashboard
            code: FORBIDDEN
            requestId: xyz-123
            timestamp: 2025-06-03T12:01:00Z

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            type: urn:error:NOT_FOUND
            title: Not Found
            status: 404
            detail: The requested resource was not found.
            instance: /user/profile
            code: NOT_FOUND
            requestId: abc-456
            timestamp: 2025-06-03T12:02:00Z

    ConflictError:
      description: Conflict – resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            type: urn:error:EMAIL_CONFLICT
            title: Conflict
            status: 409
            detail: Email already exists.
            instance: /user/register
            code: EMAIL_ALREADY_EXISTS
            requestId: def-789
            timestamp: 2025-06-03T12:03:00Z

    InternalServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            type: urn:error:INTERNAL_SERVER_ERROR
            title: Internal Server Error
            status: 500
            detail: Something went wrong on our end.
            instance: /user/register
            code: INTERNAL_SERVER_ERROR
            requestId: ghi-000
            timestamp: 2025-06-03T12:04:00Z